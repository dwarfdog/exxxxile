import os

DOMAIN = 'example.com'
DISCORD = "https://discord.gg/example"
MAINTENANCE = False
REGISTER_DISABLED = False

# Chemin de base
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Media
MEDIA_ROOT = BASE_DIR
MEDIA_URL = '/'

# Clé sécrète et sécurité
SECRET_KEY = 's3cr3t_k3y_f0r_pr0j3ct'

# Sécurité des sessions et cookies
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
SESSION_COOKIE_DOMAIN = None
SESSION_COOKIE_PATH = '/'
SESSION_COOKIE_SECURE = None
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 1209600  # 2 semaines (en secondes)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
TEST = False
ADMINS =  [('Admin', 'admin@example.com')]

ALLOWED_HOSTS = ['localhost', '0.0.0.0', DOMAIN]

# Applications :
INSTALLED_APPS = [
    'exile.apps.ExileConfig',
    'nexus.apps.NexusConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # other apps
    'precise_bbcode',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pyxile.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'nexus/static/nexus/localization/')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pyxile.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'exxxxile',
        'USER': 'exile',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'OPTIONS': {
            'options': '-c search_path=exile_s03,public'
        },
    },
    'exile_s03': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'exxxxile',
        'USER': 'exile',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'OPTIONS': {
            'options': '-c search_path=exile_s03,public'
        },
    },
    'exile_nexus': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'exxxxile',
        'USER': 'exile',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'OPTIONS': {
            'options': '-c search_path=exile_nexus,public'
        },
    },
}

DATABASE_ROUTERS = ['exile.dbrouter.MyDBRouter', 'nexus.dbrouter.MyDBRouter']

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'fr-FR'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = False
USE_TZ = True

STATIC_URL = '/static/'
EMAIL_HOST = 'localhost'
EMAIL_PORT = '25'
EMAIL_HOST_USER = None
EMAIL_HOST_PASSWORD = None
EMAIL_USE_TLS = False
EMAIL_USE_SSL = False

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',  # DEBUG, INFO, WARNING, ERROR, CRITICAL
        },
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}
